generator client {
  provider = "prisma-client-js"
}

generator scripts {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String               @id @default(cuid())
  walletAddress        String               @unique
  fid                  BigInt               @unique
  username             String?              @unique
  pfpUrl               String?
  streak               Int                  @default(0)
  level                Int                  @default(1)
  totalClaimed         Decimal              @default(0)
  createdAt            DateTime             @default(now())
  totalPoints          BigInt               @default(0)
  weeklyPoints         BigInt               @default(0)
  lastClaimedAt        DateTime?
  claimsToday          Int                  @default(0)
  lastClaimDate        DateTime?
  claimWindowStart     DateTime?
  lastMultiplierUsedAt DateTime?
  registrationStatus   RegistrationStatus   @default(PENDING)
  notificationToken    String?
  verifiedWallets      String[]             @default([])
  claims               Claim[]
  gameSessions         GameSession[]
  events               UserEvent[]
  taskCompletions      UserTaskCompletion[]
}

model Claim {
  id        String   @id @default(cuid())
  txHash    String   @unique
  amount    Decimal
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model UserEvent {
  id        String   @id @default(cuid())
  userId    String
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, type, createdAt])
}

model Task {
  id           String               @id @default(cuid())
  title        String
  description  String
  rewardPoints Int
  type         TaskType
  actionUrl    String?
  checkKey     String               @unique
  expiresAt    DateTime?
  completions  UserTaskCompletion[]
}

model UserTaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  taskId      String
  completedAt DateTime @default(now())
  task        Task     @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model IndexerState {
  id                 String @id @default("main_indexer")
  lastProcessedBlock BigInt
}

model GameSession {
  id        String    @id @default(cuid())
  userId    String
  startTime DateTime  @default(now())
  endTime   DateTime?
  score     Int       @default(0)
  status    String    @default("IN_PROGRESS")
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum RegistrationStatus {
  PENDING
  ACTIVE
}

enum TaskType {
  DEFAULT
  DAILY
  PARTNER
}
