generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

generator scripts {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  walletAddress String    @unique
  fid           BigInt      @unique 
  username      String?   @unique
  pfpUrl        String?
  streak        Int       @default(0)
  level         Int       @default(1)
  totalClaimed  Decimal   @default(0)
  totalPoints   BigInt       @default(0)
  weeklyPoints  BigInt    @default(0)
  claimsToday   Int       @default(0)
  lastClaimDate DateTime?
  lastClaimedAt DateTime?
  createdAt     DateTime  @default(now())
  claims        Claim[]
  taskCompletions UserTaskCompletion[]
  events        UserEvent[]
}

model Claim {
  id        String   @id @default(cuid())
  txHash    String   @unique
  amount    Decimal
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model UserEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // e.g., 'LEADERBOARD_VISIT'
  createdAt DateTime @default(now())

  @@index([userId, type, createdAt])
}

enum TaskType {
  DEFAULT
  DAILY
}

model Task {
  id              String    @id @default(cuid())
  title           String
  description     String
  rewardPoints    Int
  type            TaskType
  actionUrl       String?
  checkKey        String    @unique
  completions     UserTaskCompletion[]
}

model UserTaskCompletion {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  task         Task     @relation(fields: [taskId], references: [id])
  taskId       String
  completedAt  DateTime @default(now())
}

model IndexerState {
  id                 String @id @default("main_indexer")
  lastProcessedBlock BigInt
}